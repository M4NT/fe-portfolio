import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MessageCircle, X, Send, Sparkles, Zap, Brain, ArrowRight } from 'lucide-react';
import { useLanguage } from './LanguageContext';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  typing?: boolean;
}

const AISalesChat = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [hasInitialized, setHasInitialized] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const { t } = useLanguage();

  // Comprehensive AI personality and sales filtering prompts
  const aiPersonality = {
    name: "YAN.AI",
    role: "Frontend Development Specialist & Client Advisor",
    personality: "Professional, knowledgeable, and value-focused. I help identify serious clients who need revolutionary frontend solutions.",
    
    coreValues: [
      "Award-winning design and development standards",
      "Performance-first approach with 60fps optimization",
      "Cutting-edge technology implementation (WebGL, React, TypeScript)",
      "Collaborative partnership rather than simple service provision",
      "Innovation over templates - every project is custom-built",
      "Client education and transparent communication"
    ],
    
    workingMethodology: [
      "Discovery & Strategic Planning: Deep dive into business goals and user needs",
      "Technical Architecture: Custom solutions using modern frameworks",
      "Design System Creation: Scalable, maintainable component libraries",
      "Performance Optimization: Sub-second load times and smooth interactions",
      "Iterative Development: Regular feedback loops and refinements",
      "Launch & Support: Deployment optimization and ongoing maintenance"
    ],
    
    idealClientProfile: [
      "Established businesses seeking digital transformation",
      "Startups with serious funding and growth ambitions",
      "Companies valuing innovation over cost-cutting",
      "Projects requiring custom solutions, not template modifications",
      "Clients who appreciate technical expertise and creative problem-solving",
      "Long-term partnerships rather than quick fixes"
    ],
    
    projectTypes: [
      "Enterprise web applications with complex user interfaces",
      "Award-worthy portfolio and marketing websites",
      "Real-time data visualization dashboards",
      "Interactive 3D experiences and WebGL applications",
      "Performance-critical e-commerce platforms",
      "SaaS product interfaces and user experiences"
    ],
    
    qualificationQuestions: [
      "What specific business challenge are you looking to solve?",
      "What's your timeline and budget range for this project?",
      "Do you have existing brand guidelines or design requirements?",
      "What's your technical team structure and development process?",
      "How do you measure success for digital projects?",
      "Are you looking for ongoing partnership or one-time development?"
    ]
  };

  const generateAIResponse = async (userMessage: string): Promise<string> => {
    // Simulate Gemini AI API call - In production, replace with actual API
    const responses = {
      greeting: [
        `Hi! I'm YAN.AI, Yan's digital assistant. I help identify serious clients who need revolutionary frontend development. I can tell you about Yan's award-winning approach, project methodology, and see if there's a good fit for collaboration. What brings you here today?`,
        
        `Welcome! I'm here to discuss Yan's frontend development services. Yan specializes in creating award-worthy digital experiences using cutting-edge technologies like React, TypeScript, and WebGL. What kind of project are you considering?`
      ],
      
      aboutWork: [
        `Yan creates award-winning frontend experiences that compete for recognition like Awwwards. His work focuses on three pillars: 1) Performance - every project optimized for 60fps interactions, 2) Innovation - custom solutions using the latest technologies, and 3) Business Impact - designs that drive measurable results. Recent projects include real-time analytics dashboards, 3D interactive experiences, and performance-critical e-commerce platforms.`,
        
        `Yan's approach goes beyond typical web development. He builds custom component libraries, implements advanced animations with Framer Motion, creates WebGL experiences, and ensures every project loads in under 2 seconds. His methodology includes strategic planning, technical architecture, iterative development, and ongoing optimization.`
      ],
      
      methodology: [
        `Yan's 6-phase methodology ensures project success: 1) Discovery & Strategy - understanding your business goals, 2) Technical Architecture - choosing optimal tech stack, 3) Design System - creating scalable components, 4) Development - iterative building with regular feedback, 5) Performance Optimization - speed and interaction refinement, 6) Launch & Support - deployment and ongoing partnership.`,
        
        `The development process is highly collaborative. Yan believes in educating clients about technical decisions, providing regular updates, and building long-term partnerships. Projects typically range from 2-6 months depending on complexity, with ongoing support available.`
      ],
      
      pricing: [
        `Yan works with established businesses and funded startups who value innovation over cost-cutting. Project investments typically start at $15,000 for smaller applications and can reach $100,000+ for enterprise solutions. The focus is on ROI - creating digital experiences that drive business growth, not just pretty websites.`,
        
        `Investment depends on project complexity, timeline, and business requirements. Yan offers project-based pricing for defined scopes and retainer arrangements for ongoing partnerships. Would you like to discuss your specific needs to get a more accurate estimate?`
      ],
      
      technologies: [
        `Yan specializes in modern frontend technologies: React with TypeScript for robust applications, Next.js for performance optimization, Tailwind CSS for design systems, Framer Motion for advanced animations, Three.js for 3D experiences, and WebGL for custom graphics. He also integrates with various backends and APIs.`,
        
        `The technology stack is chosen based on project requirements, not personal preference. For enterprise applications: React + TypeScript + Next.js. For interactive experiences: Three.js + WebGL + custom shaders. For performance-critical sites: Optimized React with advanced caching strategies.`
      ],
      
      qualification: [
        `To ensure a good fit, I'd love to understand: What specific business challenge are you solving? What's your timeline and budget range? Do you have technical requirements or existing systems to integrate with? Are you looking for a one-time project or ongoing partnership?`,
        
        `Yan works best with clients who: Have clear business objectives, value technical expertise, appreciate innovative solutions, and understand that quality development requires appropriate investment. What's your project vision?`
      ]
    };

    // Simple keyword matching for demo - In production, use actual Gemini API
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('hey')) {
      return responses.greeting[Math.floor(Math.random() * responses.greeting.length)];
    } else if (lowerMessage.includes('work') || lowerMessage.includes('portfolio') || lowerMessage.includes('experience')) {
      return responses.aboutWork[Math.floor(Math.random() * responses.aboutWork.length)];
    } else if (lowerMessage.includes('process') || lowerMessage.includes('methodology') || lowerMessage.includes('how')) {
      return responses.methodology[Math.floor(Math.random() * responses.methodology.length)];
    } else if (lowerMessage.includes('price') || lowerMessage.includes('cost') || lowerMessage.includes('budget')) {
      return responses.pricing[Math.floor(Math.random() * responses.pricing.length)];
    } else if (lowerMessage.includes('tech') || lowerMessage.includes('technology') || lowerMessage.includes('stack')) {
      return responses.technologies[Math.floor(Math.random() * responses.technologies.length)];
    } else {
      return responses.qualification[Math.floor(Math.random() * responses.qualification.length)];
    }
  };

  const initializeChat = () => {
    if (!hasInitialized) {
      const welcomeMessage: Message = {
        id: Date.now().toString(),
        content: `Hi! I'm YAN.AI, your AI consultant for frontend development projects. I help identify serious clients who need revolutionary digital experiences. I can explain Yan's methodology, share project examples, and determine if there's a good fit for collaboration. What brings you here today?`,
        sender: 'ai',
        timestamp: new Date()
      };
      setMessages([welcomeMessage]);
      setHasInitialized(true);
    }
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate typing delay
    setTimeout(async () => {
      const aiResponse = await generateAIResponse(userMessage.content);
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: aiResponse,
        sender: 'ai',
        timestamp: new Date()
      };

      setIsTyping(false);
      setMessages(prev => [...prev, aiMessage]);
    }, 1500 + Math.random() * 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  useEffect(() => {
    if (isOpen && !hasInitialized) {
      initializeChat();
    }
  }, [isOpen, hasInitialized]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isTyping]);

  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isOpen]);

  return (
    <>
      {/* Floating Chat Button */}
      <motion.div
        className="fixed bottom-8 right-8 z-[60]"
        initial={{ scale: 0, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.8, delay: 3, ease: [0.23, 1, 0.32, 1] }}
      >
        <motion.button
          onClick={() => setIsOpen(true)}
          className="relative w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full shadow-2xl flex items-center justify-center magnetic group overflow-hidden"
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.95 }}
          animate={{ 
            boxShadow: [
              '0 0 20px rgba(59, 130, 246, 0.3)',
              '0 0 40px rgba(147, 51, 234, 0.5)',
              '0 0 20px rgba(59, 130, 246, 0.3)'
            ]
          }}
          transition={{ duration: 3, repeat: Infinity }}
        >
          {/* Pulse rings */}
          <motion.div
            className="absolute inset-0 border-2 border-white/30 rounded-full"
            animate={{ scale: [1, 2.5], opacity: [0.8, 0] }}
            transition={{ duration: 2, repeat: Infinity }}
          />
          <motion.div
            className="absolute inset-0 border-2 border-white/20 rounded-full"
            animate={{ scale: [1, 2], opacity: [0.6, 0] }}
            transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}
          />

          {/* Icon */}
          <motion.div
            className="relative z-10"
            animate={{ rotate: [0, 5, -5, 0] }}
            transition={{ duration: 4, repeat: Infinity }}
          >
            <MessageCircle size={24} className="text-white" />
          </motion.div>

          {/* Sparkle effect */}
          <motion.div
            className="absolute top-2 right-2 w-2 h-2"
            animate={{ 
              scale: [0, 1, 0],
              rotate: [0, 180, 360]
            }}
            transition={{ duration: 2, repeat: Infinity, delay: 1 }}
          >
            <Sparkles size={8} className="text-yellow-300" />
          </motion.div>

          {/* Tooltip */}
          <motion.div
            className="absolute -top-12 right-0 px-3 py-2 bg-black/80 backdrop-blur-md border border-white/20 rounded-lg text-white text-sm whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-300"
            initial={{ y: 10 }}
            whileHover={{ y: 0 }}
          >
            Talk to YAN.AI
            <div className="absolute top-full right-4 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-black/80" />
          </motion.div>
        </motion.button>
      </motion.div>

      {/* Chat Window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed inset-0 z-[70] flex items-center justify-center p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
          >
            {/* Backdrop */}
            <motion.div
              className="absolute inset-0 bg-black/60 backdrop-blur-lg"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setIsOpen(false)}
            />

            {/* Chat Container */}
                          {/* Chat Container */}
            <motion.div
              className="relative w-full max-w-md h-[600px] bg-black/90 backdrop-blur-xl border border-white/20 rounded-2xl overflow-hidden shadow-2xl flex flex-col"
              initial={{ scale: 0.8, y: 100, opacity: 0 }}
              animate={{ scale: 1, y: 0, opacity: 1 }}
              exit={{ scale: 0.8, y: 100, opacity: 0 }}
              transition={{ duration: 0.5, ease: [0.23, 1, 0.32, 1] }}
            >
              {/* Header */}
              <div className="flex-shrink-0 flex items-center justify-between p-4 border-b border-white/10 bg-gradient-to-r from-blue-600/20 to-purple-600/20">
                <div className="flex items-center space-x-3">
                  <motion.div
                    className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center"
                    animate={{ rotate: [0, 360] }}
                    transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
                  >
                    <Brain size={20} className="text-white" />
                  </motion.div>
                  <div>
                    <h3 className="text-white font-medium">YAN.AI</h3>
                    <p className="text-white/60 text-xs">Sales Consultant</p>
                  </div>
                </div>
                <motion.button
                  onClick={() => setIsOpen(false)}
                  className="w-8 h-8 bg-white/10 rounded-full flex items-center justify-center hover:bg-white/20 transition-colors"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <X size={16} className="text-white" />
                </motion.button>
              </div>

              {/* Messages Container */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4"
                {messages.map((message) => (
                  <motion.div
                    key={message.id}
                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                  >
                    <div
                      className={`max-w-[80%] p-3 rounded-2xl ${
                        message.sender === 'user'
                          ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white'
                          : 'bg-white/10 backdrop-blur-md border border-white/20 text-white'
                      }`}
                    >
                      <p className="text-sm leading-relaxed">{message.content}</p>
                      <p className="text-xs opacity-60 mt-1">
                        {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </p>
                    </div>
                  </motion.div>
                ))}

                {/* Typing Indicator */}
                {isTyping && (
                  <motion.div
                    className="flex justify-start"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                  >
                    <div className="bg-white/10 backdrop-blur-md border border-white/20 text-white p-3 rounded-2xl">
                      <div className="flex space-x-1">
                        <motion.div
                          className="w-2 h-2 bg-white/60 rounded-full"
                          animate={{ opacity: [0.4, 1, 0.4] }}
                          transition={{ duration: 1, repeat: Infinity, delay: 0 }}
                        />
                        <motion.div
                          className="w-2 h-2 bg-white/60 rounded-full"
                          animate={{ opacity: [0.4, 1, 0.4] }}
                          transition={{ duration: 1, repeat: Infinity, delay: 0.2 }}
                        />
                        <motion.div
                          className="w-2 h-2 bg-white/60 rounded-full"
                          animate={{ opacity: [0.4, 1, 0.4] }}
                          transition={{ duration: 1, repeat: Infinity, delay: 0.4 }}
                        />
                      </div>
                    </div>
                  </motion.div>
                )}

                <div ref={messagesEndRef} />
              </div>

              {/* Footer with Quick Actions and Input */}
              <div className="flex-shrink-0 border-t border-white/10">
                {/* Quick Actions */}
                <div className="px-4 py-2 border-white/10">
                  <div className="relative">
                    <div className="flex overflow-x-auto scrollbar-hide space-x-2">
                      <motion.button
                        className="absolute left-0 top-1/2 -translate-y-1/2 bg-gradient-to-r from-black to-transparent w-8 h-full flex items-center justify-start"
                        onClick={() => {
                          const container = document.querySelector('.scrollbar-hide');
                          if (container) {
                            container.scrollLeft -= 200;
                          }
                        }}
                      >
                        <ArrowRight size={16} className="text-white/40 rotate-180" />
                      </motion.button>
                      {[
                        "Tell me about Yan's work",
                        "What's the development process?",
                        "Pricing information",
                        "Technology stack",
                        "Portfolio examples",
                        "Contact information"
                      ].map((action) => (
                        <motion.button
                          key={action}
                          onClick={() => setInputValue(action)}
                          className="flex-shrink-0 px-3 py-1 bg-white/5 border border-white/20 rounded-full text-xs text-white/80 hover:bg-white/10 transition-colors"
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          {action}
                        </motion.button>
                      ))}
                      <motion.button
                        className="absolute right-0 top-1/2 -translate-y-1/2 bg-gradient-to-l from-black to-transparent w-8 h-full flex items-center justify-end"
                        onClick={() => {
                          const container = document.querySelector('.scrollbar-hide');
                          if (container) {
                            container.scrollLeft += 200;
                          }
                        }}
                      >
                        <ArrowRight size={16} className="text-white/40" />
                      </motion.button>
                    </div>
                  </div>
                </div>

                {/* Input */}
                <div className="p-4 bg-black/50 backdrop-blur-lg">
                  <div className="flex items-center space-x-2">
                    <input
                      ref={inputRef}
                      type="text"
                      value={inputValue}
                      onChange={(e) => setInputValue(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder="Ask about Yan's work, methodology, or project fit..."
                      className="flex-1 bg-white/10 backdrop-blur-md border border-white/20 rounded-full px-4 py-2 text-white placeholder-white/60 focus:outline-none focus:border-white/40 transition-colors"
                    />
                    <motion.button
                      onClick={handleSendMessage}
                      disabled={!inputValue.trim()}
                      className="w-10 h-10 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <Send size={16} className="text-white" />
                    </motion.button>
                  </div>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default AISalesChat;