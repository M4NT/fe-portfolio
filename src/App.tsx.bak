import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { LanguageProvider, useLanguage } from './components/LanguageContext';
import Navigation from './components/Navigation';
import Hero from './components/Hero';
import SelectedWorks from './components/SelectedWorks';
import SideProjects from './components/SideProjects';
import About from './components/About';
import Services from './components/Services';
import PaymentTerms from './components/PaymentTerms';
import Contact from './components/Contact';
import CustomCursor from './components/CustomCursor';
import Preloader from './components/Preloader';
import Footer from './components/Footer';


import SmoothScroll from './components/SmoothScroll';

export const AppContent = (): JSX.Element => {
  const [loading, setLoading] = useState(true);
  const { t } = useLanguage();

  useEffect(() => {
    // Adiciona a classe para o scroll suave
    document.documentElement.classList.add('has-scroll-smooth');
    const timer = setTimeout(() => {
      setLoading(false);
      document.body.style.overflow = 'unset';
    }, 4000); // agora 4 segundos

    // Advanced intersection observer for skill demonstrations
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('in-view');
            
            // Add skill demonstration effects
            const skillElements = entry.target.querySelectorAll('[data-skill]');
            skillElements.forEach((skillEl, index) => {
              (skillEl as HTMLElement).style.setProperty('--delay', `${index * 0.2}s`);
              (skillEl as HTMLElement).style.setProperty('--duration', '3s');
              skillEl.classList.add('skill-demo');
            });
          }
        });
      },
      { 
        threshold: 0.1,
        rootMargin: '0px 0px -10% 0px'
      }
    );

    // Enhanced performance monitoring
    const observedElements = document.querySelectorAll('[data-animate]');
    observedElements.forEach((el) => observer.observe(el));

    // Revolutionary scroll-based section morphing
    let currentSection = 'home';
    const handleScroll = () => {
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const sections = ['home', 'works', 'projects', 'about', 'contact'];
      
      sections.forEach((sectionId) => {
        const section = document.getElementById(sectionId);
        if (section) {
          const rect = section.getBoundingClientRect();
          const isVisible = rect.top < windowHeight * 0.6 && rect.bottom > windowHeight * 0.4;
          
          if (isVisible && currentSection !== sectionId) {
            currentSection = sectionId;
            // Trigger section transition effects
            document.body.className = `section-${sectionId}`;
          }
        }
      });
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    handleScroll(); // Initial call

    return () => {
      window.removeEventListener('scroll', handleScroll);
      observer.disconnect();
    };
  }, []);

  return (
    <>
      <SmoothScroll>
        {loading && (
          <div className="fixed inset-0 bg-black z-[9999] flex items-center justify-center modal-stage" style={{transition: 'opacity 0.5s'}}>
            <div className="text-center relative flex flex-col items-center justify-center min-h-screen">
              {/* Modern animated dots */}
              <div className="flex items-center justify-center gap-3 mb-8">
                {[...Array(5)].map((_, i) => (
                  <span
                    key={i}
                    className={`block w-4 h-4 rounded-full bg-gradient-to-r from-blue-400 to-purple-400 animate-bounce-dot`}
                    style={{
                    animationDelay: `${i * 0.2}s`,
                  }}
                ></span>
              ))}
            </div>
            {/* Tailwind animation utility for bounce-dot */}
            <style>{`
              @keyframes bounce-dot {
                0%, 100% { transform: translateY(0); opacity: 0.7; }
                50% { transform: translateY(-18px); opacity: 1; }
              }
              .animate-bounce-dot {
                animation: bounce-dot 1.2s infinite cubic-bezier(.68,-0.55,.27,1.55);
              }
            `}</style>
            {/* Enhanced loading text */}
            <div className="font-inter font-light text-4xl sm:text-6xl md:text-8xl text-white tracking-wider mb-6 md:mb-8 relative z-10">
              <span className="inline-block" style={{textShadow: '0 0 20px rgba(59,130,246,0.5), 0 0 40px rgba(147,51,234,0.7), 0 0 20px rgba(59,130,246,0.5)'}}>YAN.M</span>
            </div>
            <div className="w-32 sm:w-48 h-px bg-gradient-to-r from-transparent via-blue-400 via-purple-400 to-transparent mx-auto mb-6 md:mb-8" />
            <div className="text-white/60 text-xs sm:text-sm uppercase tracking-wider font-inter mb-6 md:mb-8">Initializing Sales Experience Platform</div>
            {/* Revolutionary loading progress */}
            <div className="w-24 sm:w-32 h-1 bg-white/10 mx-auto relative overflow-hidden rounded-full">
              <div className="absolute inset-0 bg-gradient-to-r from-blue-500 via-purple-500 to-blue-500 rounded-full animate-loader-bar" style={{backgroundSize: '200% 100%'}} />
              <div className="absolute inset-0 bg-white/20 rounded-full" style={{transformOrigin: 'left'}} />
            </div>
            {/* Loading status */}
            <div className="mt-4 sm:mt-6 text-white/40 text-xs font-inter animate-pulse">AI Sales Assistant Loading...</div>
          </div>
        </div>
      )}
      <div className={`relative bg-black text-white overflow-x-hidden${loading ? ' pointer-events-none select-none' : ''}`} style={{ opacity: loading ? 0 : 1, transition: 'opacity 0.5s' }}>
        <CustomCursor />
        <Navigation />
        <main className="relative">
          <div className="relative">
            <Hero />
            <div className="absolute bottom-0 left-0 right-0 h-32 pointer-events-none z-10" style={{background: 'linear-gradient(180deg, transparent 0%, rgba(0,0,0,0.3) 50%, rgba(10,10,10,0.8) 100%)'}} />
          </div>
          <div className="relative">
            <SelectedWorks />
            <div className="absolute bottom-0 left-0 right-0 h-32 pointer-events-none z-10" style={{background: 'linear-gradient(180deg, transparent 0%, rgba(10,10,10,0.3) 50%, rgba(15,15,15,0.8) 100%)'}} />
          </div>
          <div className="relative">
            <SideProjects />
            <div className="absolute bottom-0 left-0 right-0 h-32 pointer-events-none z-10" style={{background: 'linear-gradient(180deg, transparent 0%, rgba(15,15,15,0.3) 50%, rgba(20,20,20,0.8) 100%)'}} />
          </div>
          <div className="relative" data-animate>
            <About />
          </div>
          <div className="relative" data-animate>
            <Services />
          </div>
          <div className="relative" data-animate>
            <PaymentTerms />
          </div>
          <div className="relative" data-animate>
            <Contact />
          </div>
        </main>
        <div className="relative z-10" data-animate>
          <Footer />
        </div>
      </div>
    </>
  );
};

export const App = (): JSX.Element => (
  <LanguageProvider>
    <AppContent />
  </LanguageProvider>
);

export default App;